
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # See https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf
    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    # We have pretty heavy JS files, like about 3mb, so 400 buffers with 8kb per page will cover this size,
    # math here is following: 400 * 8 = 3200kb
    gzip_buffers 400 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/json
        application/xml
        application/rss+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    include /var/www/.whaler/nginx/upstreams/*.conf;
    include /var/www/.whaler/*/nginx/upstreams/*.conf;

    upstream php {
        server php:9000;
    }

    #include /var/www/.whaler/nginx/ssl-proxy.conf;

    server {

        listen 80 default_server;
        #listen 443 ssl default_server;
        #include /var/www/.whaler/nginx/ssl.conf;

        root /var/www/web;

        client_max_body_size 100M;

        set_real_ip_from 0.0.0.0/0;
        real_ip_header   X-Forwarded-For;

        include /var/www/.whaler/nginx/locations/*.conf;
        include /var/www/.whaler/*/nginx/locations/*.conf;

        location / {
            index app.php;
            try_files $uri @rewriteapp;
        }

        location @rewriteapp {
            rewrite ^(.*)$ /app.php/$1 last;
        }

        error_page 502 /50x.html;
        error_page 504 /50x.html;
        location = /50x.html {
            root /var/www/.whaler/nginx/errors;
        }

        location ~ ^/(config|app_dev|app)\.php(/|$) {
            fastcgi_pass php;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;

            fastcgi_param   QUERY_STRING            $query_string;
            fastcgi_param   REQUEST_METHOD          $request_method;
            fastcgi_param   CONTENT_TYPE            $content_type;
            fastcgi_param   CONTENT_LENGTH          $content_length;

            fastcgi_param   SCRIPT_FILENAME         $request_filename;
            fastcgi_param   SCRIPT_NAME             $fastcgi_script_name;
            fastcgi_param   REQUEST_URI             $request_uri;
            fastcgi_param   DOCUMENT_URI            $document_uri;
            fastcgi_param   DOCUMENT_ROOT           $document_root;
            fastcgi_param   SERVER_PROTOCOL         $server_protocol;

            fastcgi_param   GATEWAY_INTERFACE       CGI/1.1;
            fastcgi_param   SERVER_SOFTWARE         nginx/$nginx_version;

            fastcgi_param   REMOTE_ADDR             $remote_addr;
            fastcgi_param   REMOTE_PORT             $remote_port;
            fastcgi_param   SERVER_ADDR             $server_addr;
            fastcgi_param   SERVER_PORT             $server_port;
            fastcgi_param   SERVER_NAME             $server_name;

            fastcgi_param   HTTPS                   $https if_not_empty;

            fastcgi_param   REDIRECT_STATUS         200;

            fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;

            add_header upstream $upstream_addr;
        }

        # MPFE-980
        location ~* ^\/(backend-on-steroids|bundles|modera|extjs)\/(.*)\.(css|js)$ {
            # Telling browsers to avoid using heuristic algorithms (*guessing* when to cache or to avoid caching)
            # For more details see: http://webmasters.stackexchange.com/questions/53942/why-is-this-response-being-cached
            expires -1;

            # We are going to aggressively cache only those files which contain last modification "fingerprint" or version
            # numer in their URL, so only files like these will be cached:
            # * foo.css?12341234 - this kind of URLS is generated by ModeraMJRSecurityIntegrationBundle
            # * EditTranslationWindow.js?v=1.0.0 - generated by ModeraMJRCacheAwareClassLoaderBundle
            #
            # When matching using "location" block then $uri is used, which doesn't contain a query string (everything
            # after a question mark), so in order to match is we have to resort to IF
            # NB! Please keep in mind if have invalid SSL certificate and using Chrome to test cache then it may not work
            # (that's how Chrome is behaving, don't ask why)
            if ($query_string ~ ^(\d+|v=\d+\.\d+(\.\d+)?)$) {
                expires max;
            }
        }
    }
}

# stay in the foreground so Docker has a process to track
daemon off;
